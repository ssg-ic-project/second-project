<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssg.secondproject.mapper.InboundMapper">

  <select id="findAll" parameterType="PageRequestDTO" resultType="InboundResponseDTO">
    SELECT i.id
         , i.user_id       AS userId
         , u.name          AS userName
         , p.id            AS productId
         , p.name          AS productName
         , i.cell_id       AS cellId
         , i.expected_date AS expectedDate
         , i.quantity
         , ia.status
         , i.created_at    AS createdAt
         , ia.created_at   AS approvedAt
    FROM Inbound i
           JOIN User u ON u.id = i.user_id
           JOIN Product p ON p.id = i.product_id
           JOIN InboundApproval ia ON ia.inbound_id = i.id
           JOIN (SELECT c.id AS cellId
                    , w.id AS warehouseId
               FROM Cell c
                        JOIN Section s ON s.id = c.section_id
                        JOIN Warehouse w ON w.id = s.warehouse_id) wsc ON wsc.cellId = i.cell_id
           JOIN (SELECT MAX(created_at) AS createdAt
                      , inbound_id
                 FROM InboundApproval
                 GROUP BY inbound_id) maxCrt ON maxCrt.inbound_id = ia.inbound_id AND maxCrt.createdAt = ia.created_at
    <where>
      <if test="search != null">
        <if test="search.S != null and !search.S.equals('')">
          AND ia.status = #{search.S}
        </if>
        <if test="search.WH != null and !search.WH.equals('') and search.WH != 0">
          AND wsc.warehouseId = #{search.WH}
        </if>
        <if test="search.SD != null and !search.SD.equals('') and search.ED != null and !search.ED.equals('')">
          AND i.expected_date BETWEEN #{search.SD} AND #{search.ED}
        </if>
      </if>
    </where>
    <if test="orderBy != null and !orderBy.equals('')">
      ORDER BY ${orderBy} ${orderByDir}
    </if>
    LIMIT #{size} OFFSET #{offset};
  </select>

  <select id="findById" parameterType="int" resultType="InboundDetailResponseDTO">
    SELECT i.id                       AS inboundId
         , i.expected_date            AS expectedDate
         , i.quantity
         , i.created_at               AS createdAt
         , i.updated_at               AS updatedAt
         , wsc.warehouseId
         , wsc.warehouseName
         , wsc.sectionName
         , wsc.cellName
         , IFNULL(SUM(s.quantity), 0) AS stockQuantity
         , p.productId
         , p.productName
         , p.mainCategory
         , p.subCategory
         , p.detailCategory
         , p.height                   AS productHeight
         , p.width                    AS productWidth
         , p.depth                    AS productDepth
         , u.id                       AS userId
         , u.name                     AS userName
         , u.company_name             AS companyName
         , u.email                    AS userEmail
         , u.phone                    AS userPhone
    FROM Inbound i
             JOIN (SELECT c.id   AS cellId,
                          c.name AS cellName,
                          s.name AS sectionName,
                          w.id   AS warehouseId,
                          w.name AS warehouseName
                   FROM Cell c
                            JOIN Section s ON s.id = c.section_id
                            JOIN Warehouse w ON w.id = s.warehouse_id) wsc ON cellId = i.cell_id
             LEFT JOIN Stock s ON s.product_id = i.product_id AND s.cell_id = i.cell_id
             JOIN (SELECT p.id    AS productId,
                          p.name  AS productName,
                          c1.name AS mainCategory,
                          c2.name AS subCategory,
                          c3.name AS detailCategory,
                          p.height,
                          p.width,
                          p.depth
                   FROM Product p
                            LEFT JOIN Category c3 ON c3.id = p.category_id
                            LEFT JOIN Category c2 ON c2.id = c3.parent_category_id
                            LEFT JOIN Category c1 ON c1.id = c2.parent_category_id) p ON p.productId = i.product_id
             LEFT JOIN User u ON u.id = i.user_id
    WHERE i.id = #{id};
  </select>
</mapper>